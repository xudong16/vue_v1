{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      dataForm: {\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: '',\n        id: JSON.parse(sessionStorage.getItem('loginUser')).id,\n        tPassword: JSON.parse(sessionStorage.getItem('loginUser')).password\n      },\n      rules: {\n        oldPassword: [{\n          required: true,\n          message: '请输入原密码',\n          trigger: 'blur'\n        }, {\n          validator: this.verifyOldPassword\n        }],\n        newPassword: [{\n          required: true,\n          message: '请输入新密码',\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          required: true,\n          message: '请确认密码',\n          trigger: 'blur'\n        }, {\n          validator: this.confirmPasswordValidator\n        }]\n      },\n      input: false\n    };\n  },\n  methods: {\n    submitForm() {\n      this.$refs.passwordForm.validate(valid => {\n        console.log(this.dataForm);\n        if (valid) {\n          this.updatePassword();\n        } else {\n          this.$message.error('密码更新失败,请按照规则填写!');\n        }\n      });\n    },\n    confirmPasswordValidator(rule, value, callback) {\n      if (value !== this.dataForm.newPassword) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    },\n    verifyOldPassword(rule, value, callback) {\n      if (value !== this.dataForm.tPassword) {\n        callback(new Error('原密码错误!'));\n      } else {\n        callback();\n      }\n    },\n    updatePassword() {\n      // const { oldPassword, newPassword } = this.dataForm;\n      // 这里使用 axios 发送请求到 json-server 更新密码\n      const userId = this.dataForm.id;\n      console.log(userId);\n      axios.patch(`http://localhost:8080/users/${userId}`, {\n        password: this.dataForm.newPassword\n      }).then(() => {\n        this.$message.success('密码更新成功');\n        // 可以在这里添加逻辑，如跳转回登录页面或刷新当前页面\n      }).catch(error => {\n        this.$message.error('密码更新失败');\n        console.error(error);\n      });\n    },\n    changeImages() {\n      this.first = !this.first;\n      this.second = !this.second;\n    }\n  },\n  mounted() {}\n};","map":{"version":3,"names":["axios","data","dataForm","oldPassword","newPassword","confirmPassword","id","JSON","parse","sessionStorage","getItem","tPassword","password","rules","required","message","trigger","validator","verifyOldPassword","confirmPasswordValidator","input","methods","submitForm","$refs","passwordForm","validate","valid","console","log","updatePassword","$message","error","rule","value","callback","Error","userId","patch","then","success","catch","changeImages","first","second","mounted"],"sources":["src/views/page/changepsd.vue"],"sourcesContent":["<template>\n    <div class=\"change-password\">\n        <div class=\"ms-change\">\n            <el-card class=\"box1\">\n                    <div class=\"header\" style=\"text-align: center; margin-bottom:40px\"><span>修改密码</span></div>\n\n                    <el-form class=\"ms-content\" ref=\"passwordForm\" :rules=\"rules\" :model=\"dataForm\" label-width=\"100px\">\n                        <el-form-item  label=\"原密码\" prop=\"oldPassword\">\n                            <el-input type=\"password\" v-model=\"dataForm.oldPassword\" autocomplete=\"off\"\n                                @focus=\"input = true\" @blur=\"input = false\"></el-input>\n                        </el-form-item>\n                        <el-form-item  label=\"新密码\" prop=\"newPassword\">\n                            <el-input  type=\"password\" v-model=\"dataForm.newPassword\" autocomplete=\"off\"\n                                @focus=\"input = true\" @blur=\"input = false\"></el-input>\n                        </el-form-item>\n                        <el-form-item  label=\"确认密码\" prop=\"confirmPassword\">\n                            <el-input  type=\"password\" v-model=\"dataForm.confirmPassword\" autocomplete=\"off\"\n                                @focus=\"input = true\" @blur=\"input = false\"></el-input>\n                        </el-form-item>\n                    </el-form>\n                    \n                    <div style=\"text-align: center;\">\n                        <el-button type=\"primary\" @click=\"submitForm\">提交</el-button>\n                    </div>\n            </el-card>\n            <img class=\"leftImg\" src=\"../../assets/left1.png\" v-show=\"!input\">\n            <img class=\"rightImg\" src=\"../../assets/right1.png\" v-show=\"!input\">\n\n            <img class=\"leftImg\" src=\"../../assets/left2.png\" v-show=\"input\">\n            <img class=\"rightImg\" src=\"../../assets/right2.png\" v-show=\"input\">\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            dataForm: {\n                oldPassword: '',\n                newPassword: '',\n                confirmPassword: '',\n                id: JSON.parse(sessionStorage.getItem('loginUser')).id,\n                tPassword: JSON.parse(sessionStorage.getItem('loginUser')).password\n            },\n            rules: {\n                oldPassword: [\n                    { required: true, message: '请输入原密码', trigger: 'blur' },\n                    { validator: this.verifyOldPassword },\n                ],\n                newPassword: [\n                    { required: true, message: '请输入新密码', trigger: 'blur' },\n                ],\n                confirmPassword: [\n                    { required: true, message: '请确认密码', trigger: 'blur' },\n                    { validator: this.confirmPasswordValidator },\n                ],\n            },\n            input: false\n        };\n    },\n    methods: {\n        submitForm() {\n            this.$refs.passwordForm.validate((valid) => {\n                console.log(this.dataForm);\n                if (valid) {\n                    this.updatePassword();\n                } else {\n                    this.$message.error('密码更新失败,请按照规则填写!')\n                }\n            });\n        },\n        confirmPasswordValidator(rule, value, callback) {\n            if (value !== this.dataForm.newPassword) {\n                callback(new Error('两次输入密码不一致!'));\n            } else {\n                callback();\n            }\n        },\n        verifyOldPassword(rule, value, callback) {\n            if (value !== this.dataForm.tPassword) {\n                callback(new Error('原密码错误!'));\n            } else {\n                callback();\n            }\n        },\n        updatePassword() {\n            // const { oldPassword, newPassword } = this.dataForm;\n            // 这里使用 axios 发送请求到 json-server 更新密码\n            const userId = this.dataForm.id;\n            console.log(userId);\n            axios.patch(`http://localhost:8080/users/${userId}`, {\n                password: this.dataForm.newPassword\n            })\n                .then(() => {\n                    this.$message.success('密码更新成功');\n                    // 可以在这里添加逻辑，如跳转回登录页面或刷新当前页面\n                })\n                .catch((error) => {\n                    this.$message.error('密码更新失败');\n                    console.error(error);\n                });\n        },\n        changeImages() {\n            this.first = !this.first;\n            this.second = !this.second;\n        },\n    },\n   mounted() {\n   }\n};\n</script>\n\n<style scoped>\n.change-password {\n    height: 100vh;\n    background-size: cover;\n    justify-content: center;\n    align-items: center;\n    display: flex;\n}\n\n.ms-change {\n    width: 500px;\n    height: 350px;\n    border-radius: 5px;\n    background: white;\n    overflow: hidden;\n    padding: 0;\n    position: relative;\n}\n\n.box1 {\n    width: 500px;\n    height: 400px;\n    position: relative;\n}\n\n.ms-content {\n    padding-right: 30px;\n}\n\n.leftImg {\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    width: 90px;\n    /* 设置图片宽度，根据实际情况调整 */\n    height: auto;\n}\n\n.rightImg {\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    width: 90px;\n    /* 设置图片宽度，根据实际情况调整 */\n    height: auto;\n}\n</style>"],"mappings":"AAmCA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,QAAA;QACAC,WAAA;QACAC,WAAA;QACAC,eAAA;QACAC,EAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,cAAA,CAAAC,OAAA,eAAAJ,EAAA;QACAK,SAAA,EAAAJ,IAAA,CAAAC,KAAA,CAAAC,cAAA,CAAAC,OAAA,eAAAE;MACA;MACAC,KAAA;QACAV,WAAA,GACA;UAAAW,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,SAAA,OAAAC;QAAA,EACA;QACAd,WAAA,GACA;UAAAU,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAX,eAAA,GACA;UAAAS,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,SAAA,OAAAE;QAAA;MAEA;MACAC,KAAA;IACA;EACA;EACAC,OAAA;IACAC,WAAA;MACA,KAAAC,KAAA,CAAAC,YAAA,CAAAC,QAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,MAAA1B,QAAA;QACA,IAAAwB,KAAA;UACA,KAAAG,cAAA;QACA;UACA,KAAAC,QAAA,CAAAC,KAAA;QACA;MACA;IACA;IACAZ,yBAAAa,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA,UAAA/B,QAAA,CAAAE,WAAA;QACA8B,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACAhB,kBAAAc,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA,UAAA/B,QAAA,CAAAS,SAAA;QACAuB,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACAL,eAAA;MACA;MACA;MACA,MAAAO,MAAA,QAAAlC,QAAA,CAAAI,EAAA;MACAqB,OAAA,CAAAC,GAAA,CAAAQ,MAAA;MACApC,KAAA,CAAAqC,KAAA,gCAAAD,MAAA;QACAxB,QAAA,OAAAV,QAAA,CAAAE;MACA,GACAkC,IAAA;QACA,KAAAR,QAAA,CAAAS,OAAA;QACA;MACA,GACAC,KAAA,CAAAT,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA;QACAJ,OAAA,CAAAI,KAAA,CAAAA,KAAA;MACA;IACA;IACAU,aAAA;MACA,KAAAC,KAAA,SAAAA,KAAA;MACA,KAAAC,MAAA,SAAAA,MAAA;IACA;EACA;EACAC,QAAA,GACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}