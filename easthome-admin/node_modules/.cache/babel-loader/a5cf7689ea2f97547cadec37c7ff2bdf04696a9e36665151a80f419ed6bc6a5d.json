{"ast":null,"code":"export default {\n  name: 'ChapterAddUpdate',\n  data() {\n    return {\n      visible: false,\n      // 课程\n      course: {},\n      // 章节\n      chapter: {\n        id: undefined,\n        chapterName: undefined,\n        description: undefined,\n        sortNum: 1,\n        courseId: undefined\n      },\n      // 校验\n      rules: {\n        chapterName: [{\n          required: true,\n          message: '章节名称不能为空',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 15,\n          message: '长度为 2 到 15 个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    initDialog(course, chapterId) {\n      // 将列表页传递过来的id赋予user\n      this.course = course;\n      this.chapter.id = chapterId;\n      this.chapter.courseId = course.id;\n      // 打开窗体\n      this.visible = true;\n      // 根据ID获取用户给表单设置初始数据\n      if (this.chapter.id) {\n        this.$axios.get(`chapters/${this.chapter.id}`).then(({\n          data\n        }) => {\n          this.chapter = data;\n        });\n      }\n    },\n    // 提交表单\n    submitChapter() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          if (this.chapter.id) {\n            this.$axios.patch(`/chapters/${this.chapter.id}`, this.chapter).then(response => {\n              // 提示用户\n              this.$message.success('编辑成功');\n              // 关闭窗体\n\n              // 刷新表格\n              this.$emit('refreshData', this.chapter.id);\n            });\n          } else {\n            this.$axios.post('/chapters', this.chapter).then(response => {\n              // 提示用户\n              this.$message.success('新增成功');\n              // 关闭窗体\n              this.visible = false;\n              // 刷新章节列表\n              this.$emit('refreshData', this.course.id);\n            });\n          }\n        }\n      });\n    },\n    closeHandle() {\n      this.$refs.form.resetFields();\n    }\n  }\n};","map":{"version":3,"names":["name","data","visible","course","chapter","id","undefined","chapterName","description","sortNum","courseId","rules","required","message","trigger","min","max","methods","initDialog","chapterId","$axios","get","then","submitChapter","$refs","form","validate","valid","patch","response","$message","success","$emit","post","closeHandle","resetFields"],"sources":["src/views/page/ChapterAddUpdate.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <el-dialog :title=\"chapter.id ? '编辑' : '新增'\" :visible.sync=\"visible\" width=\"600px\" :close-on-click-modal=\"false\"\r\n            @close=\"closeHandle\">\r\n            <el-form ref=\"form\" :model=\"chapter\" :rules=\"rules\" label-width=\"80px\">\r\n                <el-form-item label=\"课程名称\">\r\n                    <!-- readonly文本框 -->\r\n                    <el-input v-model=\"course.courseName\" readonly></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"章节名称\" prop=\"chapterName\">\r\n                    <el-input v-model=\"chapter.chapterName\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"章节描述\" prop=\"description\">\r\n                    <el-input type=\"textarea\" v-model=\"chapter.description\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"章节排序\" prop=\"sortNum\">\r\n                    <el-input-number v-model=\"chapter.sortNum\" :min=\"1\" controls-position=\"right\"></el-input-number>\r\n                </el-form-item>\r\n            </el-form>\r\n            <span slot=\"footer\">\r\n                <el-button type=\"primary\" @click=\"submitChapter\">确 定</el-button>\r\n                <el-button @click=\"visible = false\">取 消</el-button>\r\n            </span>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'ChapterAddUpdate',\r\n    data() {\r\n        return {\r\n            visible: false,\r\n            // 课程\r\n            course: {},\r\n            // 章节\r\n            chapter: {\r\n                id: undefined,\r\n                chapterName: undefined,\r\n                description: undefined,\r\n                sortNum: 1,\r\n                courseId: undefined\r\n            },\r\n            // 校验\r\n            rules: {\r\n                chapterName: [\r\n                    { required: true, message: '章节名称不能为空', trigger: 'blur' },\r\n                    { min: 2, max: 15, message: '长度为 2 到 15 个字符', trigger: 'blur' }\r\n                ],\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        initDialog(course,chapterId) {\r\n            // 将列表页传递过来的id赋予user\r\n            this.course = course;\r\n            this.chapter.id = chapterId;\r\n            this.chapter.courseId = course.id;\r\n            // 打开窗体\r\n            this.visible = true;\r\n            // 根据ID获取用户给表单设置初始数据\r\n            if (this.chapter.id) {\r\n                this.$axios.get(`chapters/${this.chapter.id}`).then(({ data }) => {\r\n                    this.chapter = data;\r\n                });\r\n            }\r\n        },\r\n        // 提交表单\r\n        submitChapter() {\r\n            this.$refs.form.validate(valid => {\r\n                if (valid) {\r\n                    if (this.chapter.id) {\r\n                        this.$axios.patch(`/chapters/${this.chapter.id}`, this.chapter).then(response => {\r\n                            // 提示用户\r\n                            this.$message.success('编辑成功');\r\n                            // 关闭窗体\r\n                            \r\n                            // 刷新表格\r\n                            this.$emit('refreshData',this.chapter.id);\r\n                        });\r\n                    } else {\r\n                        this.$axios.post('/chapters', this.chapter).then(response => {\r\n                            // 提示用户\r\n                            this.$message.success('新增成功');\r\n                            // 关闭窗体\r\n                            this.visible = false;\r\n                            // 刷新章节列表\r\n                            this.$emit('refreshData',this.course.id);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        closeHandle() {\r\n            this.$refs.form.resetFields();\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.el-input-number {\r\n    width: 100%;\r\n}\r\n</style>"],"mappings":"AA4BA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACA;MACAC,MAAA;MACA;MACAC,OAAA;QACAC,EAAA,EAAAC,SAAA;QACAC,WAAA,EAAAD,SAAA;QACAE,WAAA,EAAAF,SAAA;QACAG,OAAA;QACAC,QAAA,EAAAJ;MACA;MACA;MACAK,KAAA;QACAJ,WAAA,GACA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAC,GAAA;UAAAH,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAG,OAAA;IACAC,WAAAf,MAAA,EAAAgB,SAAA;MACA;MACA,KAAAhB,MAAA,GAAAA,MAAA;MACA,KAAAC,OAAA,CAAAC,EAAA,GAAAc,SAAA;MACA,KAAAf,OAAA,CAAAM,QAAA,GAAAP,MAAA,CAAAE,EAAA;MACA;MACA,KAAAH,OAAA;MACA;MACA,SAAAE,OAAA,CAAAC,EAAA;QACA,KAAAe,MAAA,CAAAC,GAAA,kBAAAjB,OAAA,CAAAC,EAAA,IAAAiB,IAAA;UAAArB;QAAA;UACA,KAAAG,OAAA,GAAAH,IAAA;QACA;MACA;IACA;IACA;IACAsB,cAAA;MACA,KAAAC,KAAA,CAAAC,IAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,SAAAvB,OAAA,CAAAC,EAAA;YACA,KAAAe,MAAA,CAAAQ,KAAA,mBAAAxB,OAAA,CAAAC,EAAA,SAAAD,OAAA,EAAAkB,IAAA,CAAAO,QAAA;cACA;cACA,KAAAC,QAAA,CAAAC,OAAA;cACA;;cAEA;cACA,KAAAC,KAAA,qBAAA5B,OAAA,CAAAC,EAAA;YACA;UACA;YACA,KAAAe,MAAA,CAAAa,IAAA,mBAAA7B,OAAA,EAAAkB,IAAA,CAAAO,QAAA;cACA;cACA,KAAAC,QAAA,CAAAC,OAAA;cACA;cACA,KAAA7B,OAAA;cACA;cACA,KAAA8B,KAAA,qBAAA7B,MAAA,CAAAE,EAAA;YACA;UACA;QACA;MACA;IACA;IACA6B,YAAA;MACA,KAAAV,KAAA,CAAAC,IAAA,CAAAU,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}