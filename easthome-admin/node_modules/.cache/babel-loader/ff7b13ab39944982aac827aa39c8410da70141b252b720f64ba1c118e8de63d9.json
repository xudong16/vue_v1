{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'ChapterAddUpdate',\n  data() {\n    return {\n      // 课程\n      course: {},\n      chapter: {\n        id: undefined,\n        chapterName: undefined,\n        description: undefined,\n        sortNum: 1,\n        courseId: undefined,\n        uploadUrl: undefined\n      },\n      videoFileList: [],\n      rules: {\n        chapterName: [{\n          required: true,\n          message: \"章节名称不能为空\",\n          trigger: \"blur\"\n        }, {\n          min: 2,\n          max: 15,\n          message: \"长度为 2 到 15 个字符\",\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  methods: {\n    // 单查数据回显课程\n    getChapter(id) {\n      this.$axios.get(`/chapters/${id}`).then(response => {\n        this.chapter = response.data;\n        this.$axios.get(`/courses/${this.chapter.courseId}`).then(response => {\n          this.course = response.data;\n        });\n        // 回显图片: 手动维护fileList,在数组中添加一个模拟的文件对象\n        this.videoFileList.push({\n          // 文件对象属性: 文件名称name,文件路径url,response上传之后的响应数据\n          url: 'http://localhost:8080/' + this.chapter.uploadUrl,\n          name: this.chapter.uploadUrl,\n          response: {\n            msg: this.chapter.uploadUrl\n          }\n        });\n      });\n    },\n    // 提交课程信息\n    submitChapter() {\n      let Id = this.chapter.courseId;\n      let Name = this.course.courseName;\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          if (this.chapter.id) {\n            this.$axios.patch(`/chapters/${this.chapter.id}`, this.chapter).then(response => {\n              // 提示用户\n              this.$message.success('编辑成功');\n              // 路由导航回列表页\n              this.$router.push({\n                name: \"Chapter\",\n                params: {\n                  courseName: Name,\n                  courseId: Id\n                }\n              });\n            });\n          } else {\n            this.$axios.post('/chapters', this.chapter).then(response => {\n              // 提示用户\n              this.$message.success('新增成功');\n              // 路由导航回列表页\n              this.$router.push({\n                name: 'Chapter',\n                params: {\n                  courseName,\n                  courseId\n                }\n              });\n            });\n          }\n        }\n      });\n    },\n    // 文件类型校验\n    beforeUploadHandle(file) {\n      const allowedTypes = [\"video/mp4\", \"video/mpeg\", \"video/ogg\", \"video/webm\"];\n      if (allowedTypes.includes(file.type)) {\n        return true;\n      }\n      this.$message.error(\"只能上传视频文件\");\n      return false;\n    },\n    // 上传之后处理\n    onSuccessHandle(response) {\n      this.chapter.uploadUrl = response.msg;\n      this.$message.success(\"视频上传成功\");\n    },\n    // 超出限制之后的处理\n    onExceedHandle() {\n      this.$message.warning(\"仅能上传一个视频\");\n    },\n    // 文件删除之后的处理\n    onRemoveHandle() {\n      this.chapter.uploadUrl = undefined;\n    }\n  },\n  mounted() {\n    // 从路由中获取传递的课程ID\n    this.chapter.id = this.$route.params.id;\n\n    // 判断id是否有值\n    if (this.chapter.id) {\n      // 有值就是编辑\n      this.getChapter(this.chapter.id);\n    }\n  }\n};","map":{"version":3,"names":["name","data","course","chapter","id","undefined","chapterName","description","sortNum","courseId","uploadUrl","videoFileList","rules","required","message","trigger","min","max","methods","getChapter","$axios","get","then","response","push","url","msg","submitChapter","Id","Name","courseName","$refs","form","validate","valid","patch","$message","success","$router","params","post","beforeUploadHandle","file","allowedTypes","includes","type","error","onSuccessHandle","onExceedHandle","warning","onRemoveHandle","mounted","$route"],"sources":["src/views/page/ChapterAddUpdate.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <!-- 头部 -->\r\n        <el-page-header @back=\"() => this.$router.push({ name: 'Chapter', params: { courseName: this.course.courseName, courseId: this.course.id } })\" :content=\"course.id ? '编辑章节' : '新增章节'\">\r\n        </el-page-header>\r\n        <!-- 表单 -->\r\n        <el-form ref=\"form\" :model=\"chapter\" :rules=\"rules\" label-width=\"80px\">\r\n          <el-card shadow=\"never\">\r\n          <el-form-item label=\"课程名称\">\r\n            <el-input v-model=\"course.courseName\" readonly></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"章节名称\" prop=\"chapterName\">\r\n            <el-input v-model=\"chapter.chapterName\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"章节描述\" prop=\"description\">\r\n            <el-input type=\"textarea\" v-model=\"chapter.description\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"章节排序\" prop=\"sortNum\">\r\n            <el-input-number v-model=\"chapter.sortNum\" :min=\"1\" controls-position=\"right\"></el-input-number>\r\n          </el-form-item>\r\n          <el-form-item label=\"章节视频\" prop=\"video\">\r\n            <el-upload\r\n              name=\"file\"\r\n              class=\"upload-demo\"\r\n              action=\"http://localhost:3000/upload\"\r\n              accept=\"video/*\"\r\n              :limit=\"1\"\r\n              :before-upload=\"beforeUploadHandle\"\r\n              :file-list=\"videoFileList\"\r\n              :on-success=\"onSuccessHandle\"\r\n              :on-exceed=\"onExceedHandle\"\r\n              :on-remove=\"onRemoveHandle\"\r\n            >\r\n              <el-button size=\"small\" type=\"primary\">点击上传</el-button>\r\n              <div slot=\"tip\" class=\"el-upload__tip\">只能上传视频文件</div>\r\n            </el-upload>\r\n          </el-form-item>\r\n        </el-card>\r\n          <div class=\"submit-btn\">\r\n                <el-button type=\"primary\" round @click=\"submitChapter\">保 存</el-button>\r\n            </div>\r\n        </el-form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'ChapterAddUpdate',\r\n    \r\n    data() {\r\n        return {\r\n            // 课程\r\n            course: {\r\n\r\n            },\r\n        chapter: {\r\n          id: undefined,\r\n          chapterName: undefined,\r\n          description: undefined,\r\n          sortNum: 1,\r\n          courseId: undefined,\r\n          uploadUrl: undefined,\r\n        },\r\n        videoFileList: [],\r\n        rules: {\r\n          chapterName: [\r\n            { required: true, message: \"章节名称不能为空\", trigger: \"blur\" },\r\n            { min: 2, max: 15, message: \"长度为 2 到 15 个字符\", trigger: \"blur\" },\r\n          ],\r\n        },\r\n        };\r\n    },\r\n    methods: {\r\n        // 单查数据回显课程\r\n        getChapter(id) {\r\n            this.$axios.get(`/chapters/${id}`).then(response => {\r\n                \r\n                this.chapter = response.data;\r\n               this.$axios.get(`/courses/${this.chapter.courseId}`).then(response => {this.course = response.data});\r\n                // 回显图片: 手动维护fileList,在数组中添加一个模拟的文件对象\r\n                this.videoFileList.push({\r\n                    // 文件对象属性: 文件名称name,文件路径url,response上传之后的响应数据\r\n                    url: 'http://localhost:8080/' + this.chapter.uploadUrl,\r\n                    name: this.chapter.uploadUrl,\r\n                    response: {\r\n                        msg: this.chapter.uploadUrl\r\n                    }\r\n                });\r\n            });\r\n        },\r\n        // 提交课程信息\r\n        submitChapter() {   \r\n          let Id = this.chapter.courseId;\r\n          let Name = this.course.courseName;\r\n            this.$refs.form.validate(valid => {\r\n                if (valid) {\r\n                    if (this.chapter.id) {\r\n                        this.$axios.patch(`/chapters/${this.chapter.id}`, this.chapter).then(response => {\r\n                            // 提示用户\r\n                            this.$message.success('编辑成功');\r\n                            // 路由导航回列表页\r\n                            this.$router.push({ name: \"Chapter\", params: { courseName: Name, courseId: Id } });\r\n                        });\r\n                    } else {\r\n                        this.$axios.post('/chapters', this.chapter).then(response => {\r\n                            // 提示用户\r\n                            this.$message.success('新增成功');\r\n                            // 路由导航回列表页\r\n                            this.$router.push({ name: 'Chapter', params: { courseName,courseId }});\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        // 文件类型校验\r\n        beforeUploadHandle(file) {\r\n        const allowedTypes = [\"video/mp4\", \"video/mpeg\", \"video/ogg\", \"video/webm\"];\r\n        if (allowedTypes.includes(file.type)) {\r\n          return true;\r\n        }\r\n        this.$message.error(\"只能上传视频文件\");\r\n        return false;\r\n      },\r\n        // 上传之后处理\r\n        onSuccessHandle(response) {\r\n        this.chapter.uploadUrl = response.msg;\r\n        this.$message.success(\"视频上传成功\");\r\n      },\r\n        // 超出限制之后的处理\r\n        onExceedHandle() {\r\n        this.$message.warning(\"仅能上传一个视频\");\r\n      },\r\n        // 文件删除之后的处理\r\n        onRemoveHandle() {\r\n            this.chapter.uploadUrl = undefined;\r\n        },\r\n    },\r\n    mounted() {\r\n        // 从路由中获取传递的课程ID\r\n        this.chapter.id = this.$route.params.id\r\n\r\n        // 判断id是否有值\r\n        if (this.chapter.id) {\r\n            // 有值就是编辑\r\n            this.getChapter(this.chapter.id);\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.el-page-header {\r\n    margin: 10px 0 30px;\r\n}\r\n\r\n.el-card {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.el-select {\r\n    display: block;\r\n}\r\n\r\n.el-input-number {\r\n    width: 100%;\r\n}\r\n\r\n.el-date-editor.el-input {\r\n    width: 100%;\r\n}\r\n\r\n.submit-btn {\r\n    text-align: center;\r\n}\r\n</style>\r\n"],"mappings":";AA8CA;EACAA,IAAA;EAEAC,KAAA;IACA;MACA;MACAC,MAAA,GAEA;MACAC,OAAA;QACAC,EAAA,EAAAC,SAAA;QACAC,WAAA,EAAAD,SAAA;QACAE,WAAA,EAAAF,SAAA;QACAG,OAAA;QACAC,QAAA,EAAAJ,SAAA;QACAK,SAAA,EAAAL;MACA;MACAM,aAAA;MACAC,KAAA;QACAN,WAAA,GACA;UAAAO,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAC,GAAA;UAAAH,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAG,OAAA;IACA;IACAC,WAAAf,EAAA;MACA,KAAAgB,MAAA,CAAAC,GAAA,cAAAjB,EAAA,IAAAkB,IAAA,CAAAC,QAAA;QAEA,KAAApB,OAAA,GAAAoB,QAAA,CAAAtB,IAAA;QACA,KAAAmB,MAAA,CAAAC,GAAA,kBAAAlB,OAAA,CAAAM,QAAA,IAAAa,IAAA,CAAAC,QAAA;UAAA,KAAArB,MAAA,GAAAqB,QAAA,CAAAtB,IAAA;QAAA;QACA;QACA,KAAAU,aAAA,CAAAa,IAAA;UACA;UACAC,GAAA,kCAAAtB,OAAA,CAAAO,SAAA;UACAV,IAAA,OAAAG,OAAA,CAAAO,SAAA;UACAa,QAAA;YACAG,GAAA,OAAAvB,OAAA,CAAAO;UACA;QACA;MACA;IACA;IACA;IACAiB,cAAA;MACA,IAAAC,EAAA,QAAAzB,OAAA,CAAAM,QAAA;MACA,IAAAoB,IAAA,QAAA3B,MAAA,CAAA4B,UAAA;MACA,KAAAC,KAAA,CAAAC,IAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,SAAA/B,OAAA,CAAAC,EAAA;YACA,KAAAgB,MAAA,CAAAe,KAAA,mBAAAhC,OAAA,CAAAC,EAAA,SAAAD,OAAA,EAAAmB,IAAA,CAAAC,QAAA;cACA;cACA,KAAAa,QAAA,CAAAC,OAAA;cACA;cACA,KAAAC,OAAA,CAAAd,IAAA;gBAAAxB,IAAA;gBAAAuC,MAAA;kBAAAT,UAAA,EAAAD,IAAA;kBAAApB,QAAA,EAAAmB;gBAAA;cAAA;YACA;UACA;YACA,KAAAR,MAAA,CAAAoB,IAAA,mBAAArC,OAAA,EAAAmB,IAAA,CAAAC,QAAA;cACA;cACA,KAAAa,QAAA,CAAAC,OAAA;cACA;cACA,KAAAC,OAAA,CAAAd,IAAA;gBAAAxB,IAAA;gBAAAuC,MAAA;kBAAAT,UAAA;kBAAArB;gBAAA;cAAA;YACA;UACA;QACA;MACA;IACA;IACA;IACAgC,mBAAAC,IAAA;MACA,MAAAC,YAAA;MACA,IAAAA,YAAA,CAAAC,QAAA,CAAAF,IAAA,CAAAG,IAAA;QACA;MACA;MACA,KAAAT,QAAA,CAAAU,KAAA;MACA;IACA;IACA;IACAC,gBAAAxB,QAAA;MACA,KAAApB,OAAA,CAAAO,SAAA,GAAAa,QAAA,CAAAG,GAAA;MACA,KAAAU,QAAA,CAAAC,OAAA;IACA;IACA;IACAW,eAAA;MACA,KAAAZ,QAAA,CAAAa,OAAA;IACA;IACA;IACAC,eAAA;MACA,KAAA/C,OAAA,CAAAO,SAAA,GAAAL,SAAA;IACA;EACA;EACA8C,QAAA;IACA;IACA,KAAAhD,OAAA,CAAAC,EAAA,QAAAgD,MAAA,CAAAb,MAAA,CAAAnC,EAAA;;IAEA;IACA,SAAAD,OAAA,CAAAC,EAAA;MACA;MACA,KAAAe,UAAA,MAAAhB,OAAA,CAAAC,EAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}